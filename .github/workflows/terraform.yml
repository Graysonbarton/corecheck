name: 'Terraform & Ansible'

on:
  push:
    branches: [ "master", "dev"]
  workflow_dispatch:
  repository_dispatch:
    types:
      - webhook

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}
      TF_VAR_sonar_token: ${{ secrets.SONAR_TOKEN }}
      TF_VAR_github_token: ${{ secrets.GH_ACCESS_TOKEN }}
      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Aws configure
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region eu-west-3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Change workspace for dev
      run: if [ "${{ github.ref }}" == "refs/heads/dev" ]; then terraform workspace select dev; else terraform workspace select default; fi

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Graph
      run: terraform graph

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
    - name: Upload hosts.ini
      uses: actions/upload-artifact@v3
      with:
        name: hosts.ini
        path: deploy/ansible/hosts.ini

  ansible:
    name: 'Ansible'
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy/ansible

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
      GH_OAUTH_SECRET: ${{ secrets.GH_OAUTH_SECRET }}
      GH_OAUTH_REDIRECT_URL: ${{ secrets.GH_OAUTH_REDIRECT_URL }}

      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      API_SESSION_SECRET: ${{ secrets.API_SESSION_SECRET }}
      PLAUSIBLE_DB_PASSWORD: ${{ secrets.PLAUSIBLE_DB_PASSWORD }}
      
      PLAUSIBLE_SECRET_KEY_BASE: ${{ secrets.PLAUSIBLE_SECRET_KEY_BASE }}
      
      PYTHONUNBUFFERED: "1"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: hosts.ini
        path: deploy/ansible

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install software-properties-common
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt install ansible

    - name: Ansible Playbook
      run: ansible-playbook playbooks/*.yml
